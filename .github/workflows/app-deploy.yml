name: Build and Deploy Application
on:
  push:
    branches:
      - main
    paths:
      - 'test-app/**'
      - '.github/workflows/app-deploy.yml'
  workflow_dispatch:

env:
  REGISTRY: cr.yandex
  REGISTRY_ID: crpgaegthmh8hr8kcj62
  IMAGE_NAME: test-app
  K8S_NAMESPACE: test-app

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        run: |
          echo '${{ secrets.YANDEX_KEY_JSON }}' | base64 -d > /tmp/key.json
          cat /tmp/key.json | docker login --username json_key --password-stdin ${{ env.REGISTRY }}
          rm /tmp/key.json

      - name: Extract metadata
        id: meta
        run: |
          TIMESTAMP=$(date +%s)
          VERSION="v1.0.${TIMESTAMP}"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "tags=${{ env.REGISTRY }}/${{ env.REGISTRY_ID }}/${{ env.IMAGE_NAME }}:${VERSION}" >> $GITHUB_OUTPUT

      - name: Build Docker image
        run: |
          cd test-app
          docker build -t ${{ env.REGISTRY }}/${{ env.REGISTRY_ID }}/${{ env.IMAGE_NAME }}:latest .
          docker tag ${{ env.REGISTRY }}/${{ env.REGISTRY_ID }}/${{ env.IMAGE_NAME }}:latest \
                     ${{ env.REGISTRY }}/${{ env.REGISTRY_ID }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}

      - name: Push Docker image to Registry
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.REGISTRY_ID }}/${{ env.IMAGE_NAME }}:latest
          docker push ${{ env.REGISTRY }}/${{ env.REGISTRY_ID }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}

      - name: Logout from Container Registry
        if: always()
        run: docker logout ${{ env.REGISTRY }}

  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3

      - name: Configure kubectl
        run: |
          mkdir -p $HOME/.kube
          echo '${{ secrets.KUBECONFIG }}' | base64 -d > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Create namespace
        run: |
          kubectl create namespace ${{ env.K8S_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -
        continue-on-error: true

      - name: Apply Kubernetes manifests
        run: |
          kubectl apply -f test-app/k8s/namespace.yaml
          kubectl apply -f test-app/k8s/deployment.yaml
          kubectl apply -f test-app/k8s/service.yaml
        continue-on-error: true

      - name: Update deployment image
        run: |
          kubectl set image deployment/nginx-app \
            nginx=${{ env.REGISTRY }}/${{ env.REGISTRY_ID }}/${{ env.IMAGE_NAME }}:latest \
            -n ${{ env.K8S_NAMESPACE }}
        continue-on-error: true

      - name: Wait for rollout
        run: |
          kubectl rollout status deployment/nginx-app \
            -n ${{ env.K8S_NAMESPACE }} \
            --timeout=5m
        continue-on-error: true

      - name: Check deployment status
        run: |
          echo "## Deployment Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployment" >> $GITHUB_STEP_SUMMARY
          kubectl get deployment -n ${{ env.K8S_NAMESPACE }} >> $GITHUB_STEP_SUMMARY || echo "No deployments found"
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Pods" >> $GITHUB_STEP_SUMMARY
          kubectl get pods -n ${{ env.K8S_NAMESPACE }} >> $GITHUB_STEP_SUMMARY || echo "No pods found"
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Services" >> $GITHUB_STEP_SUMMARY
          kubectl get svc -n ${{ env.K8S_NAMESPACE }} >> $GITHUB_STEP_SUMMARY || echo "No services found"
