name: Build and Deploy Application

on:
  push:
    branches:
      - main
    paths:
      - 'test-app/**'
      - '.github/workflows/app-deploy.yml'
  workflow_dispatch:

env:
  REGISTRY: cr.yandex
  REGISTRY_ID: crpgaegthmh8hr8kcj62
  IMAGE_NAME: test-app
  K8S_NAMESPACE: test-app

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    
    outputs:
      image_tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: json_key
          password: ${{ secrets.YANDEX_KEY_JSON }}

      - name: Extract metadata
        id: meta
        run: |
          echo "version=v1.0.$(date +%s)" >> $GITHUB_OUTPUT
          echo "tags=${{ env.REGISTRY }}/${{ env.REGISTRY_ID }}/${{ env.IMAGE_NAME }}:v1.0.$(date +%s)" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./test-app
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REGISTRY_ID }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.REGISTRY_ID }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3

      - name: Configure kubectl
        run: |
          mkdir -p $HOME/.kube
          echo '${{ secrets.KUBECONFIG }}' | base64 -d > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Create namespace
        run: |
          kubectl create namespace ${{ env.K8S_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -
        continue-on-error: true

      - name: Update deployment
        run: |
          kubectl set image deployment/nginx-app \
            nginx=${{ env.REGISTRY }}/${{ env.REGISTRY_ID }}/${{ env.IMAGE_NAME }}:latest \
            -n ${{ env.K8S_NAMESPACE }} || \
          kubectl apply -f test-app/k8s/ -n ${{ env.K8S_NAMESPACE }}
        continue-on-error: true

      - name: Wait for rollout
        run: |
          kubectl rollout status deployment/nginx-app \
            -n ${{ env.K8S_NAMESPACE }} \
            --timeout=5m
        continue-on-error: true

      - name: Check deployment status
        run: |
          echo "## Deployment Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          kubectl get deployment,pods,svc -n ${{ env.K8S_NAMESPACE }} >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Image Details" >> $GITHUB_STEP_SUMMARY
          echo "Registry: ${{ env.REGISTRY }}" >> $GITHUB_STEP_SUMMARY
          echo "Image: ${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "Tag: latest" >> $GITHUB_STEP_SUMMARY
